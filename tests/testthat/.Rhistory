options = list(integer = TRUE,
criterion = "combo",
wMax = 10,
ist = 2))
expect_false(is.null(ref$details$valueLP))
expect_equal(ref$details$valueLP, ref$details$valueIP)
expect_equal(ref$details$valueIP, 0.249396391)
})
>expect_equal
?expect_equal
expect_equal(ref$details$valueLP, ref$details$valueIP, tolerance = 10e-6)
test_that("Options work as expected", {
set.seed(58)
samp_rows <- sample(1:nrow(rhc_X), 200)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 5)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(z = z, X = X, nstrata = 4)
ref <- refine(ps,
options = list(integer = TRUE,
criterion = "combo",
wMax = 10,
ist = 2))
expect_false(is.null(ref$details$valueLP))
expect_equal(ref$details$valueLP, ref$details$valueIP, tolerance = 10e-6)
expect_equal(ref$details$valueIP, 0.249396391)
})
test_that("Options work as expected", {
set.seed(58)
samp_rows <- sample(1:nrow(rhc_X), 200)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 5)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(z = z, X = X, nstrata = 4)
ref <- refine(ps,
options = list(integer = TRUE,
criterion = "combo",
wMax = 10,
ist = 2))
expect_false(is.null(ref$details$valueLP))
expect_equal(ref$details$valueLP, ref$details$valueIP, tolerance = 10e-6)
expect_equal(ref$details$valueIP, 0.249396391, tolerance = 10e-6)
})
covr::report()
?rand_pvals
set.seed(11)
samp_rows <- sample(1:nrow(rhc_X), 100)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 10)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
pvals <- rand_pvals(ps)
pvals <- rand_pvals(ps, options = list(nrand = 100))
set.seed(11)
samp_rows <- sample(1:nrow(rhc_X), 100)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 10)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
pvals <- rand_pvals(ps, options = list(nrand = 100))
pvals
test_that("List returned with all expected components", {
set.seed(11)
samp_rows <- sample(1:nrow(rhc_X), 100)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 10)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
pvals <- rand_pvals(ps, options = list(nrand = 100))
expect_setequal(names(pvals), c("pvals", "obs_details", "rand_details"))
expect_setequal(names(ps$pvals$base),
c("obj", "max", "avg", "smds"))
expect_setequal(names(ps$pvals$obs_details),
c("obj", "max", "smds"))
expect_setequal(names(ps$pvals$rand_details),
c("obj", "max", "smds"))
expect_null(pvals$pvals$refined)
expect_null(pvals$obs_details$refined)
expect_null(pvals$rand_details$refined)
})
test_that("List returned with all expected components", {
set.seed(11)
samp_rows <- sample(1:nrow(rhc_X), 100)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 10)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
pvals <- rand_pvals(ps, options = list(nrand = 100))
expect_setequal(names(pvals), c("pvals", "obs_details", "rand_details"))
expect_setequal(names(pvals$pvals$base),
c("obj", "max", "avg", "smds"))
expect_setequal(names(pvals$pvals$obs_details),
c("obj", "max", "smds"))
expect_setequal(names(pvals$pvals$rand_details),
c("obj", "max", "smds"))
expect_null(pvals$pvals$refined)
expect_null(pvals$obs_details$refined)
expect_null(pvals$rand_details$refined)
})
set.seed(11)
samp_rows <- sample(1:nrow(rhc_X), 100)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 10)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
pvals <- rand_pvals(ps, options = list(nrand = 100))
expect_setequal(names(pvals), c("pvals", "obs_details", "rand_details"))
expect_setequal(names(pvals$pvals$base),
c("obj", "max", "avg", "smds"))
expect_setequal(names(pvals$pvals$obs_details),
c("obj", "max", "smds"))
test_that("List returned with all expected components", {
set.seed(11)
samp_rows <- sample(1:nrow(rhc_X), 100)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 10)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
pvals <- rand_pvals(ps, options = list(nrand = 100))
expect_setequal(names(pvals), c("pvals", "obs_details", "rand_details"))
expect_setequal(names(pvals$pvals$base),
c("obj", "max", "avg", "smds"))
expect_setequal(names(pvals$obs_details$base),
c("obj", "max", "smds"))
expect_setequal(names(pvals$rand_details$base),
c("obj", "max", "smds"))
expect_null(pvals$pvals$refined)
expect_null(pvals$obs_details$refined)
expect_null(pvals$rand_details$refined)
})
covr::report()
devtools::load_all()
covr::report()
test_that("List returned with all expected components", {
set.seed(11)
samp_rows <- sample(1:nrow(rhc_X), 100)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 10)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
pvals <- rand_pvals(ps, options = list(nrand = 100))
expect_setequal(names(pvals), c("pvals", "obs_details", "rand_details"))
expect_setequal(names(pvals$pvals$base),
c("obj", "max", "avg", "smds"))
expect_setequal(names(pvals$obs_details$base),
c("obj", "max", "smds"))
expect_setequal(names(pvals$rand_details$base),
c("obj", "max", "smds"))
expect_null(pvals$pvals$refined)
expect_null(pvals$obs_details$refined)
expect_null(pvals$rand_details$refined)
expect_equal(length(pvals$pvals$smds), 11)
expect_equal(length(pvals$obs_details$smds), 11)
expect_equal(dim(pvals$rand_details$smds), c(100, 11))
})
length(pvals$pvals$smds)
test_that("List returned with all expected components", {
set.seed(11)
samp_rows <- sample(1:nrow(rhc_X), 100)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 10)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
pvals <- rand_pvals(ps, options = list(nrand = 100))
expect_setequal(names(pvals), c("pvals", "obs_details", "rand_details"))
expect_setequal(names(pvals$pvals$base),
c("obj", "max", "avg", "smds"))
expect_setequal(names(pvals$obs_details$base),
c("obj", "max", "smds"))
expect_setequal(names(pvals$rand_details$base),
c("obj", "max", "smds"))
expect_null(pvals$pvals$refined)
expect_null(pvals$obs_details$refined)
expect_null(pvals$rand_details$refined)
expect_equal(length(pvals$pvals$base$smds), 11)
expect_equal(length(pvals$obs_details$base$smds), 11)
expect_equal(dim(pvals$rand_details$base$smds), c(100, 11))
})
set.seed(18)
samp_rows <- sample(1:nrow(rhc_X), 200)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 10)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z)
pvals <- rand_pvals(ps, options = list(nrand = 100))
set.seed(18)
samp_rows <- sample(1:nrow(rhc_X), 200)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 10)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
set.seed(23)
samp_rows <- sample(1:nrow(rhc_X), 200)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 10)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
set.seed(23)
samp_rows <- sample(1:nrow(rhc_X), 200)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 5)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
pvals <- rand_pvals(ps, options = list(nrand = 100))
expect_equal(pvals$pvals$base$max,
mean(pvals$rand_details$base$max > pvals$obs_details$base$max))
expect_equal(pvals$pvals$base$avg,
mean(rowMeans(pvals$rand_details$base$smds) > mean(pvals$obs_details$base$smds))
expect_equal(pvals$pvals$base$max,
expect_equal(pvals$pvals$base$avg,
mean(rowMeans(pvals$rand_details$base$smds)) > mean(pvals$obs_details$base$smds))
expect_equal(pvals$pvals$base$avg,
mean(rowMeans(pvals$rand_details$base$smds) > mean(pvals$obs_details$base$smds))
expect_equal(pvals$pvals$base$max,
expect_equal(pvals$pvals$base$avg,
mean(rowMeans(pvals$rand_details$base$smds) > mean(pvals$obs_details$base$smds)))
pvals$rand_details$base$smds
pvals$obs_details$base$smds
pvals$rand_details$base$smds > pvals$obs_details$base$smds))
pvals$rand_details$base$smds > pvals$obs_details$base$smds
pvals$obs_details$base$smds
head(pvals$rand_details$base$smds )
head(pvals$rand_details$base$smds > pvals$obs_details$base$smds)
expect_equal(pvals$pvals$base$smds[5],
mean(pvals$rand_details$base$smds[, 5] > pvals$obs_details$base$smds[5]))
pvals$pvals$base$smds[5]
pvals$rand_details$base$smds[, 5]
pvals$obs_details$base$smds[5]
mean(pvals$rand_details$base$smds[, 5] > pvals$obs_details$base$smds[5])
pvals$pvals$base$smds[5],
expect_equal(pvals$pvals$base$smds[5],
mean(pvals$rand_details$base$smds[, 5] > pvals$obs_details$base$smds[5]))
expect_equal(c(pvals$pvals$base$smds[5]),
mean(pvals$rand_details$base$smds[, 5] > pvals$obs_details$base$smds[5]))
expect_equal(as.numeric(pvals$pvals$base$smds[5]),
mean(pvals$rand_details$base$smds[, 5] > pvals$obs_details$base$smds[5]))
test_that("Pvals calculated properly", {
set.seed(23)
samp_rows <- sample(1:nrow(rhc_X), 200)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 5)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
ref <- refine(ps)
pvals <- rand_pvals(ref, options = list(nrand = 100))
expect_equal(pvals$pvals$base$max,
mean(pvals$rand_details$base$max > pvals$obs_details$base$max))
expect_equal(pvals$pvals$base$avg,
mean(rowMeans(pvals$rand_details$base$smds) > mean(pvals$obs_details$base$smds)))
expect_equal(as.numeric(pvals$pvals$base$smds[5]),
mean(pvals$rand_details$base$smds[, 5] > pvals$obs_details$base$smds[5]))
expect_equal(pvals$pvals$refined$max,
mean(pvals$rand_details$refined$max > pvals$obs_details$refined$max))
expect_equal(pvals$pvals$refined$avg,
mean(rowMeans(pvals$rand_details$refined$smds) > mean(pvals$obs_details$refined$smds)))
expect_equal(as.numeric(pvals$pvals$refined$smds[3]),
mean(pvals$rand_details$refined$smds[, 3] > pvals$obs_details$refined$smds[3]))
})
covr::report()
devtools::load_all()
covr::report()
test_that("incl_base arguments work as expected", {
set.seed(17)
samp_rows <- sample(1:nrow(rhc_X), 200)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 10)]
z <- rhc_X[samp_rows, "z"]
ref <- refine(X = X, z = z)
pvals <- rand_pvals(ref, options = list(incl_base = FALSE))
})
test_that("incl_base arguments work as expected", {
set.seed(17)
samp_rows <- sample(1:nrow(rhc_X), 300)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 3)]
z <- rhc_X[samp_rows, "z"]
ref <- refine(X = X, z = z)
pvals <- rand_pvals(ref, options = list(incl_base = FALSE))
})
test_that("incl_base arguments work as expected", {
set.seed(17)
samp_rows <- sample(1:nrow(rhc_X), 300)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 3)]
z <- rhc_X[samp_rows, "z"]
ref <- refine(X = X, z = z)
pvals <- rand_pvals(ref, options = list(incl_base = FALSE, nrand = 10))
})
test_that("incl_base arguments work as expected", {
set.seed(17)
samp_rows <- sample(1:nrow(rhc_X), 300)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 3)]
z <- rhc_X[samp_rows, "z"]
ref <- refine(X = X, z = z)
pvals <- rand_pvals(ref, options = list(incl_base = FALSE, nrand = 10))
expect_null(pvals$pvals$base)
})
expect_equal(pvals$rand_details$base$obj, rowSums(pvals$rand_details$base$obj))
pvals$rand_details$base$obj
set.seed(13)
samp_rows <- sample(1:nrow(rhc_X), 100)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 10)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
set.seed(13)
samp_rows <- sample(1:nrow(rhc_X), 150)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 10)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
pvals <- rand_pvals(ps, options = list(criterion = "sum"))
expect_equal(pvals$rand_details$base$obj, rowSums(pvals$rand_details$base$obj))
pvals$rand_details$base$obj
ref <- refine(ps)
pvals <- rand_pvals(ref, options = list(criterion = "sum"))
pvals <- rand_pvals(ref, options = list(criterion = "sum", nrand = 10))
expect_equal(pvals$rand_details$base$obj, rowSums(pvals$rand_details$base$obj))
rowSums(pvals$rand_details$base$obj)
pvals$rand_details$base$obj
expect_equal(pvals$rand_details$refined$obj, rowSums(pvals$rand_details$refined$obj))
pvals$rand_details$refined$obj
expect_equal(pvals$rand_details$refined$obj, rowSums(pvals$rand_details$refined$smds))
pvals$rand_details$refined$obj
rowSums(pvals$rand_details$refined$smds)
expect_equal(pvals$rand_details$refined$obj, rowMeans(pvals$rand_details$refined$smds))
pvals$rand_details$base$max
pvals <- rand_pvals(ref, options = list(criterion = "combo", wMax = 10, nrand = 10))
pvals$rand_details$base$obj
pvals$rand_details$refined$obj
pvals$rand_details$refined$max
expect_equal(pvals$rand_details$refined$obj, rowSums(pvals$rand_details$refined$smds)/21 + 10 * pvals$rand_details$refined$max/ 21))
pvals$rand_details$refined$ob
rowSums(pvals$rand_details$refined$smds)/21
10 * pvals$rand_details$refined$max/ 21)
10 * pvals$rand_details$refined$max/ 21
expect_equal(pvals$rand_details$refined$obj, rowSums(pvals$rand_details$refined$smds)/21 + 10 * pvals$rand_details$refined$max/ 21)
pvals$rand_details$refined$smds
devtools::load_all()
covr::report()
devtools::load_all()
covr::report()
set.seed(27)
samp_rows <- sample(1:nrow(rhc_X), 100)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 5)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
ref <- refine(ps)
pvals <- rand_pvals(ref, options = list(nrand = 100))
tab <- table_rand_pvals(options = list(rand_pvals = pvals))
tab <- table_rand_pvals(ref, options = list(rand_pvals = pvals))
View(tab)
View(ref)
View(tab)
tab <- table_rand_pvals(ref, options = list(incl_base = FALSE, rand_pvals = pvals))
expect_equal(tab1[, 1:4], tab2)
tab1 <- table_rand_pvals(ref, options = list(rand_pvals = pvals))
tab2 <- table_rand_pvals(ref, options = list(incl_base = FALSE, rand_pvals = pvals))
expect_equal(tab1[, 1:4], tab2)
tab1[, 1:4]
tab2
expect_equal(tab1[, 5:8], tab2)
expect_null(tab1[1, 1:4])
expect_null(tab1[1, 1])
expect_true(all(is.na(tab1[1, 1:4])))
devtools::load_all()
covr::report()
tab2 <- table_rand_pvals(ref, options = list(incl_base = FALSE, rand_pvals = pvals))
devtools::load_all()
covr::report()
set.seed(22)
samp_rows <- sample(1:nrow(rhc_X), 100)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 5)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
tab1 <- table_rand_pvals(z = ps$z, X = ps$X, base_strata = ps$base_strata,
options = list(criterion = "combo", wMax = 10, nrand = 10))
tab1
test_that("Incl_base works properly for table", {
set.seed(22)
samp_rows <- sample(1:nrow(rhc_X), 100)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 5)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
tab1 <- table_rand_pvals(z = ps$z, X = ps$X, base_strata = ps$base_strata,
options = list(criterion = "combo", wMax = 10, nrand = 10))
expect_equal(dim(tab1), c(9, 4))
expect_equal(tab1[4, 2], 0.1527478, tolerance = 10e-5)
})
devtools::load_all()
covr::report()
test_that("Incl_base works properly for table", {
set.seed(22)
samp_rows <- sample(1:nrow(rhc_X), 100)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 5)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(X = X, z = z, nstrata = 2)
ref <- refine(ps)
pvals <- rand_pvals(ref, options = list(nrand = 100, criterion = "max"))
tab1 <- table_rand_pvals(ref, options = list(rand_pvals = pvals))
tab2 <- table_rand_pvals(ref, options = list(incl_base = FALSE, rand_pvals = pvals))
expect_equal(dim(tab2), c(9, 4))
expect_equal(tab1[, 5:8], tab2)
})
devtools::load_all()
covr::report()
set.seed(59)
samp_rows <- sample(1:nrow(rhc_X), 200)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 5)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(z = z, X = X, nstrata = 4)
ref <- refine(ps,
options = list(integer = TRUE,
criterion = "combo",
wMax = 10,
ist = 2))
smds <- calc_smds(z = ref$z, X = ref$X, refined_strata = ref$refined_strata, abs = TRUE)
obj <- (sum(smds$refined) +
10 * sum(sapply(1:4, function(x) {max(smds$refined[(2*x-1):(2*x), ])}))) / 100
obj
ref$details$valueIP
set.seed(59)
samp_rows <- sample(1:nrow(rhc_X), 200)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 5)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(z = z, X = X, nstrata = 4)
ref <- refine(ps,
options = list(criterion = "combo",
wMax = 10))
smds <- calc_smds(z = ref$z, X = ref$X, refined_strata = ref$refined_strata, abs = TRUE)
obj <- (sum(smds$refined) +
10 * sum(sapply(1:4, function(x) {max(smds$refined[(2*x-1):(2*x), ])}))) / 100
ref$details$valueIP
obj
smds$refined
sapply(1:4, function(x) {max(smds$refined[(2*x-1):(2*x), ])}))
sapply(1:4, function(x) {max(smds$refined[(2*x-1):(2*x), ])})
test_that("Objective values calculated correctly", {
set.seed(59)
samp_rows <- sample(1:nrow(rhc_X), 200)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 5)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(z = z, X = X, nstrata = 4)
ref <- refine(ps,
options = list(criterion = "combo",
wMax = 10))
smds <- calc_smds(z = ref$z, X = ref$X, refined_strata = ref$refined_strata, abs = TRUE)
obj <- (sum(smds$refined) +
10 * sum(sapply(1:4, function(x) {max(smds$refined[(2*x-1):(2*x), ])}))) / 100
expect_equal(ref$details$valueIP, obj)
})
test_that("Objective values calculated correctly", {
set.seed(59)
samp_rows <- sample(1:nrow(rhc_X), 200)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 5)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(z = z, X = X, nstrata = 4)
ref <- refine(ps,
options = list(criterion = "sum"))
smds <- calc_smds(z = ref$z, X = ref$X, refined_strata = ref$refined_strata, abs = TRUE)
obj <- (sum(smds$refined))/60
#10 * sum(sapply(1:4, function(x) {max(smds$refined[(2*x-1):(2*x), ])}))) / 100
expect_equal(ref$details$valueIP, obj)
})
set.seed(59)
samp_rows <- sample(1:nrow(rhc_X), 200)
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), 5)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(z = z, X = X, nstrata = 4)
ref <- refine(ps,
options = list(criterion = "sum"))
smds <- calc_smds(z = ref$z, X = ref$X, refined_strata = ref$refined_strata, abs = TRUE)
smds
obj <- (sum(smds$refined))/60
obj
ref$details$valueIP
smds <- calc_smds(z = ref$z, X = ref$X, refined_strata = ref$refined_strata, abs = TRUE)
obj <- (sum(smds$refined))/(6*8)
obj
ref$details$valueIP
table(ref$refined_strata)
obj <- (sum(smds$refined))/(6*5)
obj
n_st_used <- sum(table(ref$refined_strata) != 0)
n_st_used
set.seed(59)
samp_rows <- sample(1:nrow(rhc_X), 200)
ncov <- 5
nstrata <- 4
wMax <- 10
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), ncov)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(z = z, X = X, nstrata = nstrata)
ref <- refine(ps,
options = list(criterion = "combo", wMax = wMax))
n_st_used <- sum(table(ref$refined_strata) != 0)
smds <- calc_smds(z = ref$z, X = ref$X, refined_strata = ref$refined_strata, abs = TRUE)
obj <- (sum(smds$refined) + wMax * sum(sapply(1:4, function(x) {max(smds$refined[(2*x-1):(2*x), ])}))) /
((ncov+1)*n_st_used + nstrata * wMax)
obj
expect_equal(ref$details$valueIP, obj)
test_that("IP obj values calculated correctly", {
set.seed(59)
samp_rows <- sample(1:nrow(rhc_X), 200)
ncov <- 5
nstrata <- 4
wMax <- 10
X <- rhc_X[samp_rows, sample(1:ncol(rhc_X), ncov)]
z <- rhc_X[samp_rows, "z"]
ps <- prop_strat(z = z, X = X, nstrata = nstrata)
ref <- refine(ps,
options = list(criterion = "combo", wMax = wMax))
n_st_used <- sum(table(ref$refined_strata) != 0)
smds <- calc_smds(z = ref$z, X = ref$X, refined_strata = ref$refined_strata, abs = TRUE)
obj <- (sum(smds$refined) + wMax * sum(sapply(1:4, function(x) {max(smds$refined[(2*x-1):(2*x), ])}))) /
((ncov+1)*n_st_used + nstrata * wMax)
expect_equal(ref$details$valueIP, obj)
ref <- refine(ps,
options = list(criterion = "sum"))
n_st_used <- sum(table(ref$refined_strata) != 0)
smds <- calc_smds(z = ref$z, X = ref$X, refined_strata = ref$refined_strata, abs = TRUE)
obj <- (sum(smds$refined)) /
((ncov+1)*n_st_used)
expect_equal(ref$details$valueIP, obj)
ref <- refine(ps,
options = list(criterion = "max"))
n_st_used <- sum(table(ref$refined_strata) != 0)
smds <- calc_smds(z = ref$z, X = ref$X, refined_strata = ref$refined_strata, abs = TRUE)
obj <- (wMax * sum(sapply(1:4, function(x) {max(smds$refined[(2*x-1):(2*x), ])}))) /
(nstrata * wMax)
expect_equal(ref$details$valueIP, obj)
})
